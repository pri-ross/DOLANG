TEÓRICO 
BUSES
Los buses son conjuntos de líneas que permiten transmitir datos, direcciones o señales de control entre componentes. Se clasifican por uso en bus de datos, direcciones y control; por transmisión en simplex, half duplex o full duplex; por tipo de señal en serial (un dato a la vez) o paralelo (varios datos a la vez); y por reloj en síncronos (con señal de reloj) o asíncronos (sin reloj).

ALU
La RAM (memoria de acceso aleatorio) es volátil, de alta velocidad y se usa para almacenar datos temporales durante la ejecución del programa. La ROM (memoria de solo lectura) es no volátil, más lenta y almacena datos fijos o poco cambiantes, usada en funciones como memoria de arranque, tablas de datos, conversión binaria y generación de funciones. Las memorias pueden construirse con flip-flops o transistores MOSFET.

DATALOGGER
Un registrador de datos es un dispositivo electrónico que registra datos en el tiempo o en relación con la ubicación por medio de instrumentos y sensores propios o conectados externamente. Casi todos están basados en microcontroladores. Por lo general son pequeños, con pilas, portátiles, y equipados con un microprocesador, memoria interna para almacenamiento de datos y sensores

GIT Y GITHUB
Git es un sistema de gestión de versiones distribuido, también es open source y se puede integrar
con diferentes repositorios.  Por otro lado, puede ser usado para controlar versiones de código, documentos o archivos en general.
Proceso: en GIT BASH,  Navegar al directorio del repositorio con el comando CD “Nombre_Carpeta” , generar una rama nueva llamada PRUEBA con:,  Git checkout –b PRUEBA, Modificar el archivo README.md con VIM usando el comando: Vi README , Añadir los cambios a la rama con el comando: git add README.md Generar el commit con: Git commit –m “Primer Cambio”, Actualizar el repositorio con: Git push origin main y por último Verificar el cambio en github.

ATMEGA328P
Microcontrolador de 8 bits de la familia AVR de Microchip, ampliamente utilizado en proyectos de electrónica y sistemas embebidos debido a su bajo costo y facilidad de uso. 
Dispone de una memoria EEPROM interna para almacenamiento persistente, puertos digitales y analógicos, y módulos de comunicación como UART, SPI e I2C, que lo hacen ideal para aplicaciones de control y automatización.

ARQUITECTURA(CPU)
Posee una arquitectura basada en la CPU de AVR de 8 bits con una arquitectura Harvard modificada. Internamente tiene tres tipos de memoria, la flash de 32 KB para almacenar el programa, la SRAM de 2 KB para datos temporales, y la  EEPROM de 1 KB para datos no volátiles. 
Tiene periféricos integrados como los conversores ADC de 10 bits, los Timers 0, 1 y 2, las comunicaciones UART, SPI e I2C (SDA/SCL), interrupciones externas e internas, y un Watchdog Timer para recuperación ante fallos. También incluye una unidad de manejo de reloj  y una unidad de alimentación. DIAGRAMA

PROGRAM COUNTER
El Program Counter es un registro interno del microcontrolador que contiene la dirección de memoria de la próxima instrucción a ejecutar. Su función principal es controlar el flujo del programa, incrementándose automáticamente después de cada instrucción, o modificándose cuando ocurre una instrucción de salto, interrupción o subrutina.

STACK POINTER
Se entiende por Stack Ponter , un registro especial que apunta a la última dirección de la pila de memoria utilizada, el modo que funciona es el lifo, el último en entrar y el primero en salir.  Este almacena la dirección de retorno o variables al ocurrir una llamada en la subrutina se decrementa cuando ocurre un almacenamiento push y se incrementa cuando hay una recuperación pop, gestiona los saltos producidos cuando ocurre una interrupción, se almacena el contexto actual del microprocesador para poder retomarla después de procesada la interrupción.

STS,ST, STD:
Las instrucciones STS, ST y STD se utilizan para almacenar datos en memoria, pero difieren en el tipo de direccionamiento que emplean. STS guarda el contenido de un registro en una dirección absoluta de SRAM, usando una dirección fija de 16 bits; por ejemplo: STS 0x0100, R16. ST almacena en la dirección contenida en un registro apuntador (X, Y o Z), sin desplazamiento; por ejemplo: ST Z, R16. STD hace lo mismo que ST, pero permite un desplazamiento desde el registro apuntador, se usa para acceder a estructuras o arreglos, como en STD Y+2, R16. STS usa una dirección fija, ST usa una dirección contenida en un registro, y STD agrega un desplazamiento a esa dirección.

COMUNICACION SERIAL (USART-UART)
La comunicación serial USART/UART permite transmitir datos bit a bit entre dispositivos utilizando las líneas TX, RX y GND. Opcionalmente, en modo síncrono, se puede usar una línea de reloj (CLK). Por defecto opera en modo asíncrono, lo que simplifica la conexión al no requerir un reloj externo. Es ampliamente utilizada en sistemas embebidos por su eficiencia y facilidad de implementación.
La configuración básica incluye definir la velocidad de transmisión (baud rate) mediante los registros UBRRH y UBRRL, habilitar la transmisión y recepción (TXEN0 y RXEN0), y establecer el formato de datos (por ejemplo, 8 bits). Para el envío y recepción de datos se emplean funciones como UART_sendChar, UART_sendString y UART_receiveChar, las cuales operan sobre el registro de datos UDR0.

INICIALIZACIÓN UART:
Se configura el registro de baud rate (UBRRH y UBRRL) para definir la velocidad de
transmisión. Se habilita la recepción y transmisión (RXEN0 y TXEN0). Se establece el formato de datos (8 bits).Enviar char (UART_sendChar): Espera a que el registro esté listo y luego envía un carácter a través de UDR0. Recibir char (UART_receiveChar): Espera hasta que haya un dato recibido  y lo devuelve desde UDR0. Enviar string (UART_sendString): Envía una cadena de caracteres, enviando cada carácter de uno en uno con UART_sendChar.

USART(rx,tx,clk)
Comunicación serial síncrona, ambos dispositivos comparten una línea de reloj (CLK), permite que la transmisión de datos esté sincronizada. Cada dispositivo tiene una línea TX RX, lo que permite el envío y recepción simultánea de datos. A diferencia de UART, donde no se comparte el reloj, aquí el dispositivo maestro envía pulsos de reloj que marcan cuándo deben leerse o escribirse los bits. El formato de datos se compone de una secuencia de bits que se transmiten sincronizados con los flancos del reloj, típicamente empezando por el bit menos significativo (LSB) o más significativo (MSB), según la configuración.

PROTOCOLO (I2C)
El protocolo I2C es una interfaz serial síncrona que utiliza solo dos líneas: SDA para datos y SCL para el reloj, permitiendo la conexión de hasta 112 dispositivos en un mismo bus. Funciona en un modelo maestro-esclavo, donde el maestro controla la comunicación enviando una condición de inicio, la dirección del esclavo y un bit de lectura o escritura. El esclavo responde con un bit de reconocimiento (ACK) y se transfieren datos en bloques de 8 bits, también confirmados con ACK. La comunicación finaliza con una condición de parada. 

PROTOCOLO (SPI)
El protocolo SPI (Serial Peripheral Interface) es una interfaz serial síncrona de alta velocidad, utilizada para la comunicación a corta distancia en un esquema maestro-esclavo. Permite transmitir y recibir datos simultáneamente (full dúplex) y alcanzar velocidades de hasta 50 MHz, siendo más rápido que otros protocolos como I2C. La comunicación se realiza mediante cuatro líneas: SCK (reloj), MOSI (datos del maestro al esclavo), MISO (del esclavo al maestro) y CS (selección de esclavos). El maestro inicia la comunicación bajando la línea CS del esclavo deseado, genera el reloj en SCK, intercambia datos, y al finalizar, libera la línea CS para permitir nuevas comunicaciones.

COMUNICACIÓN DIR-INDIRECTA(SPI)
Comunicación directa: usa una línea de CS para cada dispositivo esclavo lo que simplifica su uso , pero aumenta la cantidad de líneas de comunicación a medida que aumenta la cantidad de esclavos conectados al bus.
Comunicación en cascada: se simplifica la cantidad de líneas de comunicación pero la comunicación se vuelve como registros de desplazamiento lo que disminuye la velocidad de comunicación.  El maestro genera el clock para la comunicación,habilita la comunicación con el esclavo que va a comunicarse, envía los datos en orden de MSB a LSB, si es requerida una respuesta el orden de lsb a msb. 

CONEXIONES FUNCIONAMIENTO (SPIS)
Esto es una forma de comunicación SPI de forma directa ya que tiene un CS (selector), del maestro para cada esclavo lo que hace que la comunicación sea más rápida, de otro modo si tuviese un selector solo del maestro para todos los esclavos esto perjudica en la velocidad de transmisión de datos.

VENTAJAS Y DESVENTAJAS (SPI_I2C)
I2C usa sólo dos líneas (SDA y SCL), lo que ahorra pines y permite conectar múltiples dispositivos en un mismo bus mediante direccionamiento, se usa para aplicaciones de baja velocidad y donde el espacio de pines es limitado, su protocolo es más complejo, requiere ACK y es más lento (hasta 5 MHz). Por otro lado, SPI tiene mayor velocidad de transmisión (hasta 50 MHz) y comunicación full dúplex, con un protocolo más simple que no necesita ACK. Su desventaja principal es el mayor consumo de pines, ya que requiere una línea CS por cada esclavo, lo que lo hace menos eficiente en sistemas con muchos dispositivos.

BLUETOOTH (HC-05)
El módulo Bluetooth HC-05 es un dispositivo que permite comunicación inalámbrica en sistemas embebidos, operando en 2.4 GHz y funcionando como maestro o esclavo. Se configura mediante comandos AT por UART, permitiendo cambiar el nombre, la velocidad de transmisión y el rol. Ofrece un alcance de hasta 100 metros, velocidad de hasta 2.1 Mbps y bajo consumo, ideal para aplicaciones portátiles. Su uso común con microcontroladores como Arduino permite la transmisión de datos en tiempo real, y en proyectos de control se emplea para sincronizar acciones como activar pistones y relés.



BLUETOOTH(3AT)
AT+NAME permite asignar un nombre personalizado al módulo, facilitando su identificación. El comando AT+ROLE se usa para consultar o cambiar el modo de funcionamiento, estableciendo si el módulo actuará como maestro 1 o esclavo 0. Por otro lado, AT+ADDR permite obtener la dirección MAC del dispositivo, se usa para establecer conexiones entre módulos específicos. AT+RESET se utiliza para reiniciar el módulo y aplicar los cambios realizados en la configuración.

2 MODULOS BLUETOOTH
Para establecer comunicación entre dos módulos HC-05 en modo maestro-esclavo, primero debes colocar ambos en modo AT presionando el botón KEY al encenderlos y conectarlos a un terminal serie a 38400 baudios. En el módulo que será esclavo, configura los siguientes comandos: AT+ROLE=0 para establecerlo como esclavo, AT+NAME=ESCLAVO_HC05 para asignarle un nombre y opcionalmente AT+UART=9600,0,0 para ajustar la velocidad. Luego, en el módulo maestro, usa AT+ROLE=1 para asignar el rol de maestro, AT+CMODE=0 para conectarse solo a dispositivos conocidos, AT+PSWD=1234 asegurando que coincida con el esclavo, y AT+UART=9600,0,0. Desde el esclavo ejecuta AT+ADDR? para obtener su dirección Bluetooth. Luego, en el maestro, realiza el emparejamiento y enlace con los comandos AT+PAIR=..., AT+BIND=..., y AT+LINK=... usando esa dirección. Una vez enlazados, el LED del esclavo dejará de parpadear y ambos módulos podrán comunicarse a través del puerto serie.

INTRODUCCION A C
Lenguaje de tipo de datos estáticos , debidamente tipado , estructuras típicas de alto nivel, dispone de construcciones del lenguaje que permiten un control a bajo nivel, lo que lo convierte en un lenguaje de nivel medio. Los compiladores ofrecen extensiones al lenguaje que posibilitan mezclar código en ensamblador con código C o acceder directamente a la memoria o dispositivos periféricos. similitudes c computador y atmega: sintaxis, declaración de variables, estructuras de control(if ,for, while), funciones , etc. y funciones estándar, se pueden usar muchas de las funciones estándar de c, como op matemáticas, manipulación de bits y control de flujo. diferencias : entorno, librerías, control directo en hardware , recursos limitados, entorno de desarrollo, interrupciones, manejo de tiempo real.

PWM
Consiste en generar un tren de pulsos , siempre del mismo periodo , pero en el que el tiempo en que la seniat es positiva, es un porcentaje del periodo. Duty cycle = ton/toff. una forma de generar un PWM es comprar dos señales de entrada. donde dependiendo de la configuración será diferente en la salida en el mismo periodo. USOS. control de velocidad, posicion servo, intensidad luminica, sonido rustico.Se puede generar de 3 manera, por medio de delay, encender y apagar bit de salida, (forzado), otro, usando interrupciones por desbordamiento, otro por un timmer y la salida por el cual queremos el pwm de forma automática.

PWM forzado.
Es una técnica utilizada para simular diferentes niveles de potencia entregada a un dispositivo, como un LED o un motor, sin cambiar el voltaje de la señal de control. A diferencia de un PWM "natural", que suele estar gestionado por hardware específico del microcontrolador, el PWM forzado se implementa por software, "forzando" manualmente el cambio de estados dentro del ciclo, lo cual es menos eficiente en términos de procesamiento pero permite controlar la potencia incluso en sistemas sin soporte de PWM en hardware.

PWM fast.
Genera una señal de alta frecuencia. El temporizador cuenta desde 0 hasta un valor máximo (MAXVAL) y luego reinicia el conteo. Durante este proceso, cuando el temporizador alcanza el valor de un registro de comparación (OCRnx), ocurre una transición en la salida. Modo No Invertido: La salida se activa (pasa a alto) al empezar el ciclo y se desacelera cuando ocurre la coincidencia con OCRnx. Modo Invertido: La salida se comporta al revés; se activa en la coincidencia y se desacata al inicio del ciclo. El ancho del pulso (ciclo de trabajo) depende del valor configurado en el registro OCRnx. 
Registros clave para PWM:
• OCRnA: Define el duty cycle y los pines de salida.
• ICRn: Establece el valor máximo, que determina la frecuencia de la señal PWM.• TCCRnA y TCCRnB: Configuran la forma de trabajo, la salida y el prescaler.
top = fosc/prescaler*fpwm - 1 , ICRn

ADC
Convierte una amplitud de tensión o corriente en la entrada en un código binario que representa su aproximación. Primero se toma un muestreo de la señal. La cuantificación mide las muestras y les asigna valores decimales. Los valores de las muestras de voltaje se representan en binario. La frecuencia de muestreo debe ser al menos el doble de la frecuencia máxima de la señal a capturar para evitar que se distorsione la señal digital debido a una tasa de muestreo insuficiente.

INICIALIZACIÓN(ADC)
Se establece Vcc del microcontrolador como referencia de voltaje (bit REFS0), convirtiendo los valores analógicos en proporción a este voltaje. Se configura la lectura justificada a la derecha (bit ADLAR). Esto determina cómo se almacena el valor de la conversión en los registros de datos. Se ajusta un prescaler de 64 (bits ADPS2 y ADPS1), que divide la frecuencia del reloj del sistema para adecuarla a la velocidad máxima de operación del ADC. Finalmente, se activa el ADC mediante el bit ADEN.

PASOS CONVERTIR(analogica/digital)ADC
Primero, se selecciona el canal de entrada analógica por ejemplo ADC0 y se configura la referencia de voltaje contra la cual se comparará la señal. Luego, se ajusta el prescaler para que el reloj del ADC funcione dentro de su rango recomendado (entre 50 kHz y 200 kHz), y se habilita el módulo ADC. Para iniciar la conversión, se activa el bit de inicio (ADSC), y el microcontrolador espera a que la conversión finalice, cuando el bit ADSC se borra. Por último, se lee el resultado digital de los registros ADCL y ADCH, obteniendo un valor de 10 bits que representa la proporción entre la señal de entrada y el voltaje de referencia.

LECTURA(ADC)
Se elige uno de los 8 canales disponibles (ADC0-ADC7) ajustando los bits correspondientes en el registro ADMUX. Al configurar el bit ADSC, el ADC empieza a convertir el valor analógico en un valor digital. Se monitorea el bit ADSC para saber cuándo termina la conversión. Mientras este bit está en 1, la conversión sigue en proceso; cuando cambia a 0, la conversión ha finalizado. Finalmente, se lee el resultado de la conversión en el registro ADC. Este valor, que estará entre 0 y 1023.

TEMPORIZADORES 
El atmega tiene 3 contadores, el timer 0 y 2 son contadores de 8 bits(255) y el times 1 es de 16(65.536). Se puede generar subrutinas de esperas(delay),pwm para control de leds o motores.
TCNT: almacena el conteo del timer contador, este contador se incrementa 
TIFR: registro que almacena las banderas de estado
TCCRX: Registro de configuración del times 

INTERRUPCIONES
Es un mecanismo que permite al microcontrolador responder automáticamente a eventos externos, como la presión de un botón o la recepción de datos, sin detener sus tareas principales. Esto permite una reacción eficiente a eventos asincrónicos mientras se continúa con otras operaciones.

CONF.INTERRUPCIONES
Habilitar interrupciones globales con sei() en C. Configurar el periférico (temporizador, ADC, etc.) para la interrupción deseada. Activar la interrupción local en el registro correspondiente. Definir la ISR para manejar la interrupción.

SLEEP MODE
Permite reducir el consumo de energía en el microcontrolador. En este modo, la mayoría de los periféricos se apagan, pero algunos, como temporizadores o ciertos pines, pueden mantenerse activos para despertar el sistema. El microcontrolador se despierta por interrupciones, como una señal de temporizador. Existen varios modos de Sleep (Idle, Power-down, Power-save, etc.), cada uno con diferentes niveles de ahorro de energía. iprom = (i1*t1)+(i2*t2)/ (t1+t2)

WATCHDOG TIMER (WDT)
Es un temporizador que resetea el microcontrolador si este queda bloqueado, por ejemplo,
en un bucle infinito. El WDT puede configurarse para tiempos de espera de hasta 8
segundos. Si el microcontrolador no resetea el temporizador antes de que desborde, se
genera un reinicio

EEPROM
Se divide en posiciones de 1 byte (8 bits, es decir número entre 0-255) cada una. Su capacidad varía según el microcontrolador, y algunos no la tienen. Su vida útil es de alrededor de 100,000 ciclos de escritura. Para almacenar un dato se debe indicar la posición y luego el valor.

ESCRITURA(EEPROM)
Cargar la direccion de memoria EEPROM en EEAR (Address_register). Cargar el dato a escribir en EEDR (data_register). Deshabilitar interrupciones globles (cli()) para evitar interrupciones durante la escritura. Configurar  EEMPE a '1' en EECR. Configurar EEPE a '1' en EECR para iniciar la escritura.  Esperar hasta que se complete la operación verificando que EEPE vuelva a '0' . Rehabilitar interrupciones globales (sei()).

LECTURA(EEPROM)
Cargar la dirección de memoria EEPROM en EEAR (address_register). Configurar EERE a '1' en EECR. Leer el valor de EEDR para obtener el dato almacenado en la dirección especificada.

SENSOR(DHT-11)
Dispositivo utilizado en la medición de variables ambientales como temperatura y humeda, bajo costo y capacidad para proyectos electrónicos. Opera con un protocolo de comunicación de un solo hilo (1-Wire), que permite la transmisión de datos de manera eficiente entre el sensor y el microcontrolador, utilizando un solo cable para comunicación bidireccional. Este protocolo se caracteriza por su diseño maestro-esclavo, donde el microcontrolador actúa como el maestro que inicia las comunicaciones y el sensor como esclavo que responde con los datos requeridos. 
El DHT11 utiliza un termistor de coeficiente de temperatura negativa (NTC) para medir la temperatura, aprovechando el principio de que la resistencia del material semiconductor disminuye con el aumento de la temperatura. Por otro lado, para medir la humedad, incorpora un sensor  capacitivo compuesto por dos electrodos y un material dieléctrico en medio, cuya capacitancia varía según el nivel de humedad presente en el ambiente. El proceso de comunicación del sensor incluye la transmisión de datos que combinan información sobre temperatura, humedad y un mecanismo de verificación (checksum) para garantizar la integridad de los datos recibidos.

PROTOCOLO 1-WIRE, (1,0)
Interfaz de comunicación serial de un solo hilo, bidireccional y de baja velocidad, funciona en modo maestro-esclavo, permitiendo un maestro y hasta 100 esclavos, aunque aumenta el tiempo de comunicación con más dispositivos. Para la escritura de Datos, el maestro envía un 1 o 0 lógico ajustando la duración de la señal baja (1-15 µs para 1, 60-120 us para 0). Para la lectura de datos el maestro envía un 1 lógico, si el esclavo responde con un 1, la señal se mantiene en alto. Para un 0 lógico, el esclavo mantiene la señal en bajo.

FUNCIONAMIENTO ULTRASÓNICO HC-SR04
Se usa para medir distancias. El transmisor envía una señal de 40 kHz y el receptor mide el tiempo que tarda en regresar el eco, calculando así la distancia al objeto. Tiene un rango de 2 cm a 400 cm. El pin Trig se activa en alto por 10 µs para iniciar un pulso ultrasónico. El pin Echo se pone en alto mientras se envía y recibe el eco. Midiendo el tiempo que permanece alto, se calcula la distancia al objeto. distancia = velocidad x tiempo, como el pulso va y viene se divide entre 2 .

VENTAJAS UN PIN TECLADO MATRICIAL
Al utilizar un pin solo del arduino se puede ahorrar pines del mismo, pero es más complejo a nivel de código. Para el caso de utilizar 4 pines para las columnas y 4 pines para las filas, hace que se ocupen más pines y aparte que esto, para que funcione se debe implementar un ciclo for para filas y uno para columnas, lo que perjudica en la utilización de pines pwm si se quisiese usar para otra cosa. 

PASO A PASO(unipolar de bipolar)
La diferencia está en su bobinado y control, el unipolar tiene derivación central en cada bobina(5,6 u 8 cables) y se controla fácil activando secuencias de encendido sin necesidad de invertir la polaridad, el bipolar (4 cables) no tiene derivación central, requiere invertir las corrientes en las bobinas mediante un puente h permitiendo más torque y precisión.

¿QUÉ ES POLLING?
Es un método en el que el microcontrolador revisa constantemente, si un periférico ha cambiado de estado, como verificar si llegaron datos por el puerto serial. consume tiempo de procesamiento y puede impedir que el micro realice otras tareas importantes en paralelo.


;CONTADOR 0 A 99 

.org 0x0000
rjmp comienzo           

.org 0x0002
rjmp i_comienzo   

.org 0x0004
rjmp i_pausa       

.def unidades = r16   
.def decenas = r17   
.def estado = r18     ; Estado del contador: 0 = Pausado, 1 = Contando

comienzo:
    ldi r16, HIGH(RAMEND)
    out SPH, r16
    ldi r16, LOW(RAMEND)
    out SPL, r16

    ldi r16, 0xFF
    out DDRB, r16     

    ldi r16, 0b00001100
    out DDRD, r16      
    ldi r16, 0x03      
    out DDRC, r16

    ldi r16, (1<<ISC01) | (1<<ISC11) ; Flanco de subida INT0 e INT1
    sts EICRA, r16

    ldi r16, (1<<INT0) | (1<<INT1)   ; Habilitar interrupciones INT0 e INT1
    out EIMSK, r16
    sei                             

    clr unidades
    clr decenas
    clr estado                    

main:
    ; Revisar si el estado es (contando)
    cpi estado, 1
    brne main                

    ; Incrementa el contador
    inc unidades
    cpi unidades, 10
    brlo Actualizar_displays ; Si no llega a 10, actualizar displays
    clr unidades
    inc decenas
    cpi decenas, 10
    brlo Actualizar_displays
    clr decenas

Actualizar_displays:

    call multiplexar_displays
    rjmp main                  

multiplexar_displays:
 
    sbi PORTC, PC0                   ; Activar transistor para unidades
    cbi PORTC, PC1                   ; Apagar transistor de decenas
    mov r16, unidades
    call set_7seg                   
    call delay

    sbi PORTC, PC1                   ; Activar transistor para decenas
    cbi PORTC, PC0                   ; Apagar transistor de unidades
    mov r16, decenas
    call set_7seg                    
    call delay

    ret

set_7seg:
    mov r0, r16                      
    call get_7seg_code               
    out PORTB, r20                   
    ret

get_7seg_code:
    ldi r28, LOW(0x0100)             
    ldi r29, HIGH(0x0100)
    add r28, r0                      ; r0 para desplazar en la tabla
    ld  r20, Y                       ; Cargar el cÃ³digo desde la LUT en r20
    ret

guardar_codigos:
    ldi r28, 0x00                    
    ldi r29, 0x01                    
    ldi r20, 0b01111110              ; 0
    ST  Y+, r20
    ldi r20, 0b00110000              ; 1
    ST  Y+, r20
    ldi r20, 0b01101101              ; 2
    ST  Y+, r20
    ldi r20, 0b01111001              ; 3
    ST  Y+, r20
    ldi r20, 0b00110011              ; 4
    ST  Y+, r20
    ldi r20, 0b01011011              ; 5
    ST  Y+, r20
    ldi r20, 0b01011111              ; 6
    ST  Y+, r20
    ldi r20, 0b01110000              ; 7
    ST  Y+, r20
    ldi r20, 0b01111111              ; 8
    ST  Y+, r20
    ldi r20, 0b01110011              ; 9
    ST  Y+, r20
    ret

i_comienzo:
    ldi estado, 1                 
    reti

i_pausa:
    clr estado                   
    reti

delay:
    ldi r20, 100

delay_loop:
    dec r20
    brne delay_loop
    ret

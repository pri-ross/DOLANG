#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

void USART_init(unsigned int ubrr);
void USART_transmit(char data);
void USART_sendString(const char* str);
unsigned int ADC_read(void);
void servo_move(uint8_t angle);
void display_color(uint8_t color);

int main(void) {
	USART_init(103);  

	
	ADMUX = (1<<REFS0);              
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);  
	DDRB |= (1<<PB1);
	
	while (1) {
		unsigned int adcValue = ADC_read(); 
		char buffer[20];
		sprintf(buffer, "ADC: %u\n", adcValue);  
		USART_sendString(buffer);

		if (adcValue < 341) {
			servo_move(0);  
			display_color(1);  
			} else if (adcValue < 682) {
			servo_move(90);  
			display_color(2);
			} else {
			servo_move(180);  
			display_color(3);
		}

		_delay_ms(1500); 
	}
}

void USART_init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr>>8);
	UBRR0L = (unsigned char)ubrr;
	UCSR0B = (1<<TXEN0);
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
}

void USART_transmit(char data) {
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
}

void USART_sendString(const char* str) {
	while (*str) {
		USART_transmit(*str++);
	}
}

unsigned int ADC_read(void) {
	ADCSRA |= (1<<ADSC); 
	while (ADCSRA & (1<<ADSC));
	return ADC;
}

void servo_move(uint8_t angle) {
	TCCR1A = (1<<COM1A1) | (1<<WGM11);
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);  
	ICR1 = 20000;  

	uint16_t pulse_width = 1000 + ((angle * 1000) / 180);
	OCR1A = pulse_width;
}

void display_color(uint8_t color) {
	char buffer[10];
	sprintf(buffer, "Color %u\n", color);
	USART_sendString(buffer);
}
